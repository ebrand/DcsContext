@{
    ViewData["Title"] = "D3 TestHarness";
}
<style>
	path {
		stroke: #fff;
	}

	path:first-child {
		fill: yellow !important;
	}

	circle {
		fill: #666;
		pointer-events: none;
	}

	.q0-9 { fill: rgb(197, 27, 125);  }
	.q1-9 { fill: rgb(222, 119, 174); }
	.q2-9 { fill: rgb(241, 182, 218); }
	.q3-9 { fill: rgb(253, 224, 239); }
	.q4-9 { fill: rgb(247, 247, 247); }
	.q5-9 { fill: rgb(230, 245, 208); }
	.q6-9 { fill: rgb(184, 225, 134); }
	.q7-9 { fill: rgb(127, 188, 65);  }
	.q8-9 { fill: rgb(77, 146, 33);   }

</style>

@section Scripts {
	@{
		<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
		<script>

			var width = 1600;
			var height = 900;

			var vertices = d3.range(1000).map(
				function(d) { return [Math.random() * width, Math.random() * height]; }
			);

			var voronoi = d3.geom.voronoi()
				.clipExtent([[0, 0], [width, height]]);

			var svg = d3.select("body")
				.append("svg")
				.attr("width", width)
				.attr("height", height)
				.on("mousemove", mouseMove);

			var path = svg.append("g").selectAll("path");

			svg.selectAll("circle")
				.data(vertices.slice(1))
				.enter().append("circle")
				.attr("transform", function(d) { return "translate(" + d + ")"; })
				.attr("r", 1);

			redraw();

			function mouseMove() {
				vertices[0] = d3.mouse(this);
				redraw();
			}

			function redraw() {

				// Voronoi paths
				path = path.data(d3.geom.delaunay(vertices).map(function (d) { return "M" + d.join("L") + "Z"; }), String);
				path.exit().remove();
				path.enter().append("path").attr("class", function (d, i) { return "q" + (i % 9) + "-9"; }).attr("d", String);
				path.order();

				// Delaunay triangulation paths
				//path = path.data(voronoi(vertices), polygon);
				//path.exit().remove();
				//path.enter().append("path")
				//	.attr("class", function(d, i) { return "q" + (i % 9) + "-9"; })
				//	.attr("d", polygon);
				//path.order();
			}

			function polygon(d) {
				return "M" + d.join("L") + "Z";
			}

		</script>
	}
}